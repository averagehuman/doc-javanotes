[ `Previous Section`_ | `Chapter Index`_ | `Main Index`_ ]


**Subsections**


The Netgame Framework
A Simple Chat Room
A Networked TicTacToe Game
A Networked Poker Game



Section 12.5
~~~~~~~~~~~~


Network Programming Example: A Networked Game Framework
-------------------------------------------------------



T his section presents several programs that use networking and
threads. The common problem in each application is to support network
communication between several programs running on different computers.
A typical example of such an application is a networked game with two
or more players, but the same problem can come up in less frivolous
applications as well. The first part of this section describes a
common framework that can be used for a variety of such applications,
and the rest of the section discusses three specific applications that
use that framework.

This section was inspired by a pair of students, Alexander
Kittelberger and Kieran Koehnlein, who wanted to write a networked
poker game as a final project in a class that I was teaching. I helped
them with the network part of the project by writing a basic framework
to support communication between the players. Since the application
illustrates a variety of important ideas, I decided to include a
somewhat more advanced and general version of that framework in the
current edition of this book. The final example is a networked poker
game.





12.5.1The Netgame Framework
~~~~~~~~~~~~~~~~~~~~~~~~~~~

One can imagine playing many different games over the network. As far
as the network goes, all of those games have at least one thing in
common: There has to be some way for actions taken by one player to be
communicated over the network to other players. It makes good
programming sense to make that capability available in a reusable
common core that can be used in many different games. I have written
such a core; it is defined by several classes in the package
`netgame.common`_.

We have not done much with packages in this book, aside from using
built-in classes. Packages were introduced in `Subsection2.6.4`_, but
we have stuck to the ``default package'' in our programming examples.
In practice, however, packages are used in all but the simplest
programming projects to divide the code into groups of related
classes. It makes particularly good sense to define a reusable
framework in a package that can be included as a unit in a variety of
projects.

Integrated development environments such as Eclipse or Netbeans make
it very easy to use packages: To use the netgame package in a project
in an IDE, simply copy-and-paste the entire `netgame`_ directory into
the project.

If you work on the command line, you should be in a working directory
that includes the netgame directory as a subdirectory. Then, to
compile all the java files in the package `netgame.common`_, for
example, you can use the following command in Mac OS or Linux:


::

    javac netgame/common/*.java


For windows, you should use backslashes instead of forward slashes:


::

    javac netgame\common\*.java


To run a main program that is defined in a package, you should again
be in a directory that contains the package as a subdirectory, and you
should use the full name of the class that you want to run. For
example, the ChatRoomServer class, discussed later in this section, is
defined in the package `netgame.chat`_, so you would run it with the
command


::

    java netgame.chat.ChatRoomServer


I will have more to say about packages in the final example of the
book, in `Section13.5`_.




The applications discussed in this section are examples of distributed
computing, since they involve several computers communicating over a
network. Like the example in `Subsection12.4.5`_, they use a central
"server," or "master," to which a number of "clients" will connect.
All communication goes through the server; a client cannot send
messages directly to another client. In this section, I will refer to
the server as a hub, in the sense of "communications hub":



In `Subsection12.4.5`_, messages were sent back and forth between the
server and the client in a definite, predetermined sequence.
Communication between the server and a client was actually
communication between one thread running on the server and another
thread running on the client. For the netgame framework, however, I
want to allow for asynchronous communication, in which it is not
possible to wait for messages to arrive in a predictable sequence. To
make this possible a netgame client will use two threads for
communication, one for sending messages and one for receiving
messages. Similarly, the netgame hub will use two threads for
communicating with each client.

The hub is generally connected to many clients and can receive
messages from any of those clients at any time. The hub will have to
process each message in some way. To organize this processing, the hub
uses a single thread to process all incoming messages. When a
communication thread receives a message from a client, it simply drops
that message into a queue of incoming messages. There is only one such
queue, which is used for messages from all clients. The message
processing thread runs in a loop in which it removes a message from
the queue, processes it, removes another message from the queue,
processes it, and so on. The queue itself is implemented as an object
of typeLinkedBlockingQueue (see `Subsection12.3.3`_).



There is one more thread in the hub, not shown in the illustration.
This final thread creates a ServerSocket and uses it to listen for
connection requests from clients. Each time it accepts a connection
request, it hands off the client to another object, defined by the
nested class ConnectionToClient, which will handle communication with
that client. Each connected client is identified by an ID number. ID
numbers 1, 2, 3,...are assigned to clients as they connect. Since
clients can also disconnect, the clients connected at any give time
might not have consecutive IDs. A variable of type
TreeMap<Integer,ConnectionToClient> associates the ID numbers of
connected clients with the objects that handle their connections.

The messages that are sent and received are objects. The I/O streams
that are used for reading and writing objects are of
typeObjectInputStream and ObjectOutputStream. (See
`Subsection11.1.6`_.) The output stream of a socket is wrapped in an
ObjectOutputStream to make it possible to transmit objects through
that socket. The socket's input stream is wrapped in an
ObjectInputStream to make it possible to receive objects. Remember
that the objects that are used with such streams must implement the
interface java.io.Serializable.

The netgame Hub class is defined in the file`Hub.java`_, in the
package `netgame.common`_. The port on which the server socket will
listen must be specified as a parameter to the Hub constructor. The
Hub class defines a method


::

    protected void messageReceived(int playerID, Object message)


which is called to process messages that are received from clients.
The first parameter, playerID, is the ID number of the client from
whom the message was received, and the second parameter is the message
itself. In the Hub class, this method will simply forward the message
to all connected clients. To forward the message, it wraps both the
playerID and the message in an object of type ForwardedMessage
(defined in the file `ForwardedMessage.java`_, in the package
netgame.common). In a simple application such as the chat room
discussed in the `nextsubsection`_, this might be sufficient. For most
applications, however, it will be necessary to define a subclass of
Hub and redefine the messageReceived() method to do more complicated
message processing. There are several other methods that a subclass
might redefine, including


+ protected void playerConnected(int playerID) -- This method is
  called each time a player connects to the hub. The parameter playerID
  is the ID number of the newly connected player. In the Hub class, this
  method does nothing. Note that the complete list of ID numbers for
  currently connected players can be obtained by callinggetPlayerList().
+ protected void playerDisconnected(int playerID) -- This is called
  each time a player disconnects from the hub. The parameter tells which
  player has just disconnected. In the Hub class, this method does
  nothing.


The Hub class also defines a number of useful public methods, notably


+ sendToAll(message) -- sends the specified message to every client
  that is currently connected to the hub. The message must be a non-null
  object that implements the Serializable interface.
+ sendToOne(recipientID,message) -- sends a specified message to just
  one user. The first parameter,recipientID is the ID number of the
  client who will receive the message. This method returns a boolean
  value, which is false if there is no connected client with the
  specified recipientID.
+ shutDownServerSocket() -- shuts down the hub's server socket, so
  that no additional clients will be able to connect. This could be
  used, for example, in a two-person game, after the second client has
  connected.
+ setAutoreset(autoreset) -- sets the boolean value of the autoreset
  property. If this property is true, then the ObjectOutputStreams that
  are used to transmit messages to clients will automatically be reset
  before each message is transmitted. (Resetting an ObjectOutputStream
  is something that has to be done if an object is written to the
  stream, modified, and then written to the stream again. If the stream
  is not reset before writing the modified object, then the old,
  unmodified value is sent to the stream instead of the new value. See
  `Subsection11.1.6`_ for a discussion of this technicality.)


For more information -- and to see how all this is implemented -- you
should read the source code file `Hub.java`_. With some effort, you
should be able to understand everything in that file.




Turning to the client side, the basic netgame client class is defined
in the file`Client.java`_, in the package `netgame.common`_. The
Client class has a constructor that specifies the host name (or IP
address) and port number of the hub to which the client will connect.
This constructor blocks until the connetion has been established.

Client is an abstract class. Every netgame application must define a
subclass of Client and provide a definition for the abstract method:


::

    abstract protected void messageReceived(Object message);


This method is called each time a message is received from the netgame
hub to which the client is connected. A subclass of client might also
override the protected methodsplayerConnected,
playerDisconnected,serverShutdown, and connectionClosedByError. See
the `sourcecode`_ for more information. I should also note that Client
contains the protected instance variable connectedPlayerIDs, of type
int[], an array containing the ID numbers of all the clients that are
currently connected to the hub. The most important public methods that
are provided by the Client class are


+ send(message) -- transmits a message to the hub. Themessage can be
  any non-null object that implements theSerializable interface.
+ getID() -- gets the ID number that was assigned to this client by
  the hub.
+ disconnect() -- closes the client's connection to the hub. It is not
  possible to send messages after disconnecting. The send() method will
  throw an IllegalStateException is an attempt is made to do so.


The Hub and Client classes are meant to define a general framework
that can be used as the basis for a variety of networked games -- and,
indeed, of other distributed programs. The low level details of
network communication and multithreading are hidden in the private
sections of these classes. Applications that build on these classes
can work in terms of higher-level concepts such as players and
messages. The design of these classes was developed though several
iterations, based on experience with several actual applications. I
urge you to look at the source code to see how Hub andClient use
threads, sockets, and streams. In the remainder of this section, I
will discuss three applications built on the netgame framework. I will
not discuss these applications in great detail. You can find the
complete source code for all three in the`netgame`_ package.





12.5.2A Simple Chat Room
~~~~~~~~~~~~~~~~~~~~~~~~

Our first example is a "chat room," a network application where users
can connect to a server and can then post messages that will be seen
by all current users of the room. It is similar to the `GUIChat`_
program from `Subsection12.4.2`_, except that any number of users can
participate in a chat. While this application is not a game as such,
it does show the basic functionality of the netgame framework.

The chat room application consists of two programs. The
first,`ChatRoomServer.java`_, is a completely trivial program that
simply creates a netgame Hub to listen for connection requests from
netgame clients:


::

    public static void main(String[] args) {
        try {
            new Hub(PORT);
        }
        catch (IOException e) {
            System.out.println("Can't create listening socket.  Shutting down.");
        }
    }


The port number, PORT, is defined as a constant in the program and is
arbitrary, as long as both the server and the clients use the same
port.

The second part of the chat room application is the
program`ChatRoomWindow.java`_, which is meant to be run by users who
want to participate in the chat room. A potential user must know the
name (or IP address) of the computer where the hub is running. (For
testing, it is possible to run the client program on the same computer
as the hub, using localhost as the name of the computer where the hub
is running.) When ChatRoomWindow is executed, it uses a dialog box to
ask the user for this information. It then opens a window that will
serve as the user's interface to the chat room. The window has a large
transcript area that displays messages that users post to the chat
room. It also has a text input box where the user can enter messages.
When the user enters a message, that message will be posted to the
transcript of every user who is connected to the hub, so all users see
every message sent by every user. Let's look at some of the
programming.

Any netgame application must define a subclass of the abstract
`Client`_ class. For the chat room application, clients are defined by
a nested class ChatClient inside ChatRoomWindow. The program has an
instance variable, connection, of typeChatClient, which represents the
program's connection to the hub. When the user enters a message, that
message is sent to the hub by calling


::

    connection.send(message);


When the hub receives the message, it packages it into an object of
type `ForwardedMessage`_, along with the ID number of the client who
sent the message. The hub sends a copy of that ForwardedMessage to
every connected client, including the client who sent the message.
When the message is received from the hub by a client object,
themessageReceived() method of the client object is called.ChatClient
overrides this method to make it add the message to the transcript of
the ChatClientWindow.

A client is also notified when a player connects to or disconnects
from the hub and when the connection with the hub is lost. ChatClient
overrides the methods that are called when these events happen so that
they post appropriate messages to the transcript. Here's the complete
definition of the client class for the chat room application:


::

    /**
     * A ChatClient connects to a Hub and is used to send messages to
     * and receive messages from the Hub.  Messages received from the
     * Hub will be of type ForwardedMessage and will contain the
     * ID number of the sender and the string that was sent by that user.
     */
    private class ChatClient extends Client {
    
        /**
         * Opens a connection to the chat room server on a specified computer.
         */
        ChatClient(String host) throws IOException {
            super(host, PORT);
        }
    
        /**
         * Responds when a message is received from the server.  It should be
         * a ForwardedMessage representing something that one of the participants
         * in the chat room is saying.  The message is simply added to the
         * transcript, along with the ID number of the sender.
         */
        protected void messageReceived(Object message) {
            if (message instanceof ForwardedMessage) {  
                             // (no other message types are expected)
                ForwardedMessage fm = (ForwardedMessage)message;
                addToTranscript("#" + fm.senderID + " SAYS:  " + fm.message);
            }
        }
    
        /**
         * Called when the connection to the client is shut down because of some
         * error message.  (This will happen if the server program is terminated.)
         */
        protected void connectionClosedByError(String message) {
            addToTranscript("Sorry, communication has shut down due to an error:\n     " 
                                            + message);
            sendButton.setEnabled(false);
            messageInput.setEnabled(false);
            messageInput.setEditable(false);
            messageInput.setText("");
            connected = false;
            connection = null;
        }
    
        /**
         * Posts a message to the transcript when someone leaves the chat room.
         */
        protected void playerConnected(int newPlayerID) {
            addToTranscript("Someone new has joined the chat room, with ID number " 
                                           + newPlayerID);
        }
    
        /**
         * Posts a message to the transcript when someone leaves the chat room.
         */
        protected void playerDisconnected(int departingPlayerID) {
            addToTranscript("The person with ID number " + departingPlayerID 
                                         + " has left the chat room");
        }
    
    } // end nested class ChatClient


For the full source code of the chat room application, see the source
code files, which can be found in the package`netgame.chat`_.

Note: A user of my chat room application is identified only by an ID
number that is assigned by the hub when the client connects.
Essentially, users are anonymous, which is not very satisfying. See
`Exercise12.6`_ at the end of this chapter for a way of addressing
this issue.





12.5.3A Networked TicTacToe Game
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

My second example is a very simple game: the familiar children's game
TicTacToe. In TicTacToe, two players alternate placing marks on a
three-by-three board. One player plays X's; the other plays O's. The
object is to get three X's or three O's in a row.

At a given time, the state of a TicTacToe game consists of various
pieces of information such as the current contents of the board, whose
turn it is, and -- when the game is over -- who won or lost. In a
typical non-networked version of the game, this state would be
represented by instance variables. The program would consult those
instance variables to determine how to draw the board and how to
respond to user actions such as mouse clicks. In the networked netgame
version, however, there are **three** programs involved: Two copies of
a client program, which provide the interface to the two players of
the game, and the hub program that manages the connections to the
clients. These programs are not even running on the same computer, so
they can't share the same instance variables. Nevertheless, the game
has to have a single, well-defined state at any time, and both players
have to be aware of that state.

My solution is to store the "official" game state in the hub, and to
send a copy of that state to each player every time the state changes.
The players can't change the state directly. When a player takes some
action, such as placing a piece on the board, that action is sent as a
message to the hub. The hub changes the state to reflect the result of
the action, and it sends the new state to both players. The window
used by each player will then be updated to reflect the new state. In
this way, we can be sure that the game always looks the same to both
players.

Networked TicTacToe is defined in several classes in the package
`netgame.tictactoe`_.`TicTacToeGameState`_ represents the state of a
game. It includes a method


::

    public void applyMessage(int senderID, Object message)


that modifies the state to reflect the effect of a message received
from one of the players of the game. The message will represent some
action taken by the player, such as clicking on the board.

The Hub class knows nothing about TicTacToe. Since the hub for the
TicTacToe game has to keep track of the state of the game, it has to
be defined by a subclass of Hub. The `TicTacToeGameHub`_ class is
quite simple. It overrides the messageRecieved() method so that it
responds to a message from a player by applying that message to the
game state and sending a copy of the new state to both players. It
also overrides the playerConnected() and playerDisconnected() methods
to take appropriate actions, since the game can only be played when
there are exactly two connected players. Here is the complete source
code:


::

    package netgame.tictactoe;
    
    import java.io.IOException;
    
    import netgame.common.Hub;
    
    /**
     * A "Hub" for the network TicTacToe game.  There is only one Hub
     * for a game, and both network players connect to the same Hub.
     * Official information about the state of the game is maintained
     * on the Hub.  When the state changes, the Hub sends the new 
     * state to both players, ensuring that both players see the
     * same state.
     */
    public class TicTacToeGameHub extends Hub {
        
        private TicTacToeGameState state;  // Records the state of the game.
    
        /**
         * Create a hub, listening on the specified port.  Note that this
         * method calls setAutoreset(true), which will cause the output stream
         * to each client to be reset before sending each message.  This is
         * essential since the same state object will be transmitted over and
         * over, with changes between each transmission.
         * @param port the port number on which the hub will listen.
         * @throws IOException if a listener cannot be opened on the specified port.
         */
        public TicTacToeGameHub(int port) throws IOException {
            super(port);
            state = new TicTacToeGameState();
            setAutoreset(true);
        }
    
        /**
         * Responds when a message is received from a client.  In this case,
         * the message is applied to the game state, by calling state.applyMessage().
         * Then the possibly changed state is transmitted to all connected players.
         */
        protected void messageReceived(int playerID, Object message) {
            state.applyMessage(playerID, message);
            sendToAll(state);
        }
    
        /**
         * This method is called when a player connects.  If that player
         * is the second player, then the server's listening socket is
         * shut down (because only two players are allowed), the 
         * first game is started, and the new state -- with the game
         * now in progress -- is transmitted to both players.
         */
        protected void playerConnected(int playerID) {
            if (getPlayerList().length == 2) {
                shutdownServerSocket();
                state.startFirstGame();
                sendToAll(state);
            }
        }
    
        /**
         * This method is called when a player disconnects.  This will
         * end the game and cause the other player to shut down as
         * well.  This is accomplished by setting state.playerDisconnected
         * to true and sending the new state to the remaining player, if 
         * there is one, to notify that player that the game is over.
         */
        protected void playerDisconnected(int playerID) {
            state.playerDisconnected = true;
            sendToAll(state);
        }
    }


A player's interface to the game is represented by the class
`TicTacToeWindow`_. As in the chat room application, this class
defines a nested subclass of Client to represent the client's
connection to the hub. One interesting point is how the client
responds to a message from the hub. Such a message represents a new
game state. When the message is received, the window must be updated
to show the new state. The message is received and processed by one
thread; the updating is done in another thread. This has the potential
of introducing race conditions that require synchronization. (In
particular, as I was developing the program, I found that it was
possible for a message to be received before the window's constructor
had finished executing. This led to a very hard-to-diagnose bug
because my response to the message was trying to use objects that had
not yet been created.)

When working with the Swing API, it is recommended that all
modifications to the GUI be made in the GUI event thread. An
alternative would be to makepaintComponent() and other methods
synchronized, but that would negatively impact the performace of the
GUI. Swing includes a method SwingUtilitites.invokeLater(runnable) to
make it possible to run arbitrary code in the GUI event thread. The
parameter,runnable, is an object that implements the Runnable
interface that was discussed in `Subsection12.1.1`_. ARunnable object
has a run() method.SwingUtilities.runLater() will schedule the run()
method of the object to be executed in the GUI event thread. It will
be executed after that thread has finished handling any pending
events. By executing run() in the event thread, you can be sure that
it will not introduce any synchronization problems. In the TicTacToe
client class, this technique is used in the method that processes
events received from the hub:


::

    protected void messageReceived(final Object message) {
        if (message instanceof TicTacToeGameState) {
            SwingUtilities.invokeLater(new Runnable(){
                public void run() {
                       // The newstate() method updates the GUI for the new state.
                    newState( (TicTacToeGameState)message ); 
                }
            });
        }
    }


(The SwingUtiltites class, by the way, includes a variety of useful
static methods that can be used in programming with Swing; it's worth
taking a look at the documentation for that class.)

To run the TicTacToe netgame, the two players should each run the
program`Main.java`_ in the package `netgame.tictactoe`_. This program
presents the user with a dialog box where the user can choose to start
a new game or to join an existing game. If the user starts a new game,
then a TicTacToeHub is created to manage the game; a TicTacToeWindow
is created and connects to that hub. If the user chooses to connect to
an existing game, then only the window is created; that window
connects to the hub that was created by the first player. The second
player has to know the name of the computer where the first player's
program is running. As usual, for testing, you can run everything on
one computer and use "localhost" as the computer name.





12.5.4A Networked Poker Game
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

And finally, we turn very briefly to the application that inspired the
netgame framework: Poker. In particular, I have implemented a two-
player version of the traditional "five card draw" version of that
game. This is a rather complex application, and I do not intend to say
much about it here other than to describe the general design. The full
source code can be found in the package`netgame.fivecarddraw`_. To
fully understand it, you will need to be familiar with the game of
five card draw poker. And it uses some techniques from `Section13.1`_
for drawing the cards.

In general outline, the Poker game is similar to the TicTacToe game.
There is a `Main`_ class that can be run by either player, to start a
new game or to join an existing game. There is a class
`PokerGameState`_ to represent the state of a game. And there is a
subclass,`PokerHub`_, of Hub to manage the game.

But Poker is a much more complicated game than TicTacToe, and the game
state is correspondingly more complicated. It's not clear that we want
to broadcast a new copy of the complete game state to the players
every time some minor change is made in the state. Furthermore, it
doesn't really make sense for both players to know the full game state
-- that would include the opponent's hand and full knowledge of the
deck from which the cards are dealt. (Of course, our client programs
wouldn't have to show the full state to the players, but it would be
easy enough for a player to substitute their own client program to
enable cheating.) So in the Poker application, the full game state is
known only to the PokerHub. A PokerGameState object represents a view
of the game from the point of view of one player only. When the state
of the game changes, the PokerHub creates two differentPokerGameState
objects, representing the state of the game from each player's point
of view, and it sends the appropriate game state objects to each
player. You can see the `sourcecode`_ for details.

(One of the hard parts in poker is to implement some way to compare
two hands, to see which is higher. In my game, this is handled by the
class `PokerRank`_. You might find this class useful in other poker
games.)



** End of Chapter 12 **







[ `Previous Section`_ | `Chapter Index`_ | `Main Index`_ ]

.. _netgame.tictactoe: http://math.hws.edu/javanotes/c12/../source/netgame/tictactoe/
.. _Client: http://math.hws.edu/javanotes/c12/../source/netgame/common/Client.java
.. _13.5: http://math.hws.edu/javanotes/c12/../c13/s5.html
.. _12.6: http://math.hws.edu/javanotes/c12/../c12/ex6-ans.html
.. _netgame.chat: http://math.hws.edu/javanotes/c12/../source/netgame/chat
.. _TicTacToeGameHub: http://math.hws.edu/javanotes/c12/../source/netgame/tictactoe/TicTacToeGameHub.java
.. _Hub.java: http://math.hws.edu/javanotes/c12/../source/netgame/common/Hub.java
.. _TicTacToeGameState: http://math.hws.edu/javanotes/c12/../source/netgame/tictactoe/TicTacToeGameState.java
.. _PokerHub: http://math.hws.edu/javanotes/c12/../source/netgame/fivecarddraw/PokerHub.java
.. _2.6.4: http://math.hws.edu/javanotes/c12/../c2/s6.html#basics.6.4
.. _Main: http://math.hws.edu/javanotes/c12/../source/netgame/fivecarddraw/Main.java
.. _GUIChat: http://math.hws.edu/javanotes/c12/../source/GUIChat.java
.. _Main Index: http://math.hws.edu/javanotes/c12/../index.html
.. _PokerRank: http://math.hws.edu/javanotes/c12/../source/netgame/fivecarddraw/PokerRank.java
.. _TicTacToeWindow: http://math.hws.edu/javanotes/c12/../source/netgame/tictactoe/TicTacToeWindow.java
.. _12.3.3: http://math.hws.edu/javanotes/c12/../c12/s3.html#threads.3.3
.. _netgame.chat: http://math.hws.edu/javanotes/c12/../source/netgame/chat/
.. _12.4.2: http://math.hws.edu/javanotes/c12/../c12/s4.html#threads.4.2
.. _code: http://math.hws.edu/javanotes/c12/../source/netgame/fivecarddraw/
.. _subsection: http://math.hws.edu/javanotes/c12/../c12/s5.html#threads.5.2
.. _12.4.5: http://math.hws.edu/javanotes/c12/../c12/s4.html#threads.4.5
.. _netgame: http://math.hws.edu/javanotes/c12/../source/netgame/
.. _11.1.6: http://math.hws.edu/javanotes/c12/../c11/s1.html#IO.1.6
.. _ChatRoomWindow.java: http://math.hws.edu/javanotes/c12/../source/netgame/chat/ChatRoomWindow.java
.. _ChatRoomServer.java: http://math.hws.edu/javanotes/c12/../source/netgame/chat/ChatRoomServer.java
.. _ForwardedMessage: http://math.hws.edu/javanotes/c12/../source/netgame/common/ForwardedMessage.java
.. _PokerGameState: http://math.hws.edu/javanotes/c12/../source/netgame/fivecarddraw/PokerGameState.java
.. _Chapter Index: http://math.hws.edu/javanotes/c12/index.html
.. _Previous Section: http://math.hws.edu/javanotes/c12/s4.html
.. _Main.java: http://math.hws.edu/javanotes/c12/../source/netgame/tictactoe/Main.java
.. _netgame: http://math.hws.edu/javanotes/c12/../source/netgame
.. _13.1: http://math.hws.edu/javanotes/c12/../c13/s1.html
.. _netgame.common: http://math.hws.edu/javanotes/c12/../source/netgame/common/
.. _12.1.1: http://math.hws.edu/javanotes/c12/../c12/s1.html#threads.1.1


